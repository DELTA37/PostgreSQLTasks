
Constraint check  
![](https://i.ibb.co/D9Zkxgq/image.png)  

Casual check
![](https://i.ibb.co/JrwRYZf/image.png)

References v1
![](https://i.ibb.co/Rp35QXr/image.png)

References v2
![](https://i.ibb.co/DLNyyV1/image.png)

поведения: ON DELETE CASCADE, ON DELETE NO ACTION, ON DELETE RESTRICT, SET NULL, SET DEFAULT


2) 
Посмотрите, какие ограничения уже наложены на атрибуты таблицы «Успевае- мость» (progress). Воспользуйтесь командой \d утилиты psql. А теперь пред- ложите для этой таблицы ограничение уровня таблицы.
В качестве примера рассмотрим такой вариант. Добавьте в таблицу progress еще один атрибут — «Форма проверки знаний» (test_form), который может принимать только два значения: «экзамен» или «зачет». Тогда набор допусти- мых значений атрибута «Оценка» (mark) будет зависеть от того, экзамен или за- чет предусмотрены по данной дисциплине. Если предусмотрен экзамен, тогда допускаются значения 3, 4, 5, если зачет — тогда 0 (не зачтено) или 1 (зачтено).

Не забудьте, что значения NULL для атрибутов test_form и mark не допуска- ются.
Новое ограничение может быть таким:
   ALTER TABLE progress
     ADD CHECK (
( test_form = 'экзамен' AND mark IN ( 3, 4, 5 ) ) OR
( test_form = 'зачет' AND mark IN ( 0, 1 ) )
);
Проверьте, как будет работать новое ограничение в модифицированной таб- лице progress. Для этого выполните команды INSERT, как удовлетворяющие ограничению, так и нарушающие его.
В таблице уже было ограничение на допустимые значения атрибута mark. Как вы думаете, не будет ли оно конфликтовать с новым ограничением? Проверьте эту гипотезу. Если ограничения конфликтуют, тогда удалите старое ограниче- ние и снова попробуйте добавить строки в таблицу.
Подумайте, какое еще ограничение уровня таблицы можно предложить для этой таблицы?

Решение:

edu=# \d+ progress 
                                       Table "public.progress"
   Column    |     Type     | Collation | Nullable | Default | Storage  | Stats target | Description 
-------------+--------------+-----------+----------+---------+----------+--------------+-------------
 record_book | numeric(5,0) |           | not null |         | main     |              | 
 subject     | text         |           | not null |         | extended |              | 
 acad_year   | text         |           | not null |         | extended |              | 
 term        | numeric(1,0) |           | not null |         | main     |              | 
 mark        | numeric(1,0) |           | not null | 5       | main     |              | 
Check constraints:
    "progress_mark_check" CHECK (mark >= 3::numeric AND mark <= 5::numeric)
    "progress_term_check" CHECK (term = 1::numeric OR term = 2::numeric)
Foreign-key constraints:
    "progress_record_book_fkey" FOREIGN KEY (record_book) REFERENCES students(record_book) ON UPDATE CASCADE ON DELETE CASCADE
Access method: heap


edu=# ALTER TABLE progress ADD COLUMN test_form varchar CHECK (test_form IS NOT NULL AND ((mark IN (0, 1) AND test_form = 'зачет') OR (mark IN (3, 4, 5) AND test_form = 'экзамен')) );
ALTER TABLE
edu=# \d+ progress 
                                         Table "public.progress"
   Column    |       Type        | Collation | Nullable | Default | Storage  | Stats target | Description 
-------------+-------------------+-----------+----------+---------+----------+--------------+-------------
 record_book | numeric(5,0)      |           | not null |         | main     |              | 
 subject     | text              |           | not null |         | extended |              | 
 acad_year   | text              |           | not null |         | extended |              | 
 term        | numeric(1,0)      |           | not null |         | main     |              | 
 mark        | numeric(1,0)      |           | not null | 5       | main     |              | 
 test_form   | character varying |           |          |         | extended |              | 
Check constraints:
    "progress_check" CHECK (test_form IS NOT NULL AND ((mark = ANY (ARRAY[0::numeric, 1::numeric])) AND test_form::text = 'зачет'::text OR (mark = ANY (ARRAY[3::numeric, 4::numeric, 5::numeric])) AND test_form::text = 'экзамен'::text))
    "progress_mark_check" CHECK (mark >= 3::numeric AND mark <= 5::numeric)
    "progress_term_check" CHECK (term = 1::numeric OR term = 2::numeric)
Foreign-key constraints:
    "progress_record_book_fkey" FOREIGN KEY (record_book) REFERENCES students(record_book) ON UPDATE CASCADE ON DELETE CASCADE
Access method: heap


Попробуем вставить!
edu=# INSERT INTO progress VALUES (1, 'математика', '2020', 1, 1, 'экзамен');
ERROR:  new row for relation "progress" violates check constraint "progress_check"
DETAIL:  Failing row contains (1, математика, 2020, 1, 1, экзамен).
edu=# 

9) В таблице «Студенты» (students) есть текстовый атрибут name, на который на- ложено ограничение NOT NULL. Как вы думаете, что будет, если при вводе новой строки в эту таблицу дать атрибуту name в качестве значения пустую строку? Например:
INSERT INTO students ( record_book, name, doc_ser, doc_num ) VALUES ( 12300, '', 0402, 543281 );
Наверное, проектируя эту таблицу, мы хотели бы все же, чтобы пустые строки в качестве значения атрибута name не проходили в базу данных? Какое реше- ние вы можете предложить? Видимо, нужно добавить ограничение CHECK для столбца name. Если вы еще не изучили команду ALTER TABLE, то удалите табли- цу students и создайте ее заново с учетом нового ограничения, а если вы уже познакомились с командой ALTER TABLE, то сделайте так:
    ALTER TABLE students ADD CHECK ( name <> '' );
Добавив ограничение, попробуйте теперь вставить в таблицу students строку (row), в которой значение атрибута name было бы пустой строкой (string).
Давайте продолжим эксперименты и предложим в качестве значения атрибута name строку, содержащую сначала один пробел, а потом — два пробела.
    INSERT INTO students VALUES ( 12346, ' ', 0406, 112233 );
    INSERT INTO students VALUES ( 12347, '  ', 0407, 112234 );
Для того чтобы «увидеть» эти пробелы в выборке, сделаем так:
    SELECT *, length( name ) FROM students;
Оказывается, эти невидимые значения имеют ненулевую длину. Что делать, чтобы не допустить таких значений-невидимок? Один из способов: возложить проверку таких ситуаций на прикладную программу. А что можно сделать на уровне определения таблицы students? Какое ограничение нужно предло- жить? В разделе 9.4 документации «Строковые функции и операторы» есть функция trim. Попробуйте воспользоваться ею. Если вы еще не изучили коман- ду ALTER TABLE, то удалите таблицу students и создайте ее заново с учетом нового ограничения, а если уже познакомились с ней, то сделайте так:
ALTER TABLE students ADD CHECK (...);
Есть ли подобные слабые места в таблице «Успеваемость» (progress)?

Решение:
edu=# ALTER TABLE students ADD CHECK ( name <> '' );
ALTER TABLE
edu=# \d+ students
                                          Table "public.students"
    Column    |     Type     | Collation | Nullable |   Default    | Storage  | Stats target | Description 
--------------+--------------+-----------+----------+--------------+----------+--------------+-------------
 record_book  | numeric(5,0) |           | not null |              | main     |              | 
 name         | text         |           | not null |              | extended |              | 
 doc_ser      | numeric(4,0) |           |          |              | main     |              | 
 doc_num      | numeric(6,0) |           |          |              | main     |              | 
 who_adds_row | text         |           |          | CURRENT_USER | extended |              | 
Indexes:
    "students_pkey" PRIMARY KEY, btree (record_book)
Check constraints:
    "students_name_check" CHECK (name <> ''::text)
Referenced by:
    TABLE "progress" CONSTRAINT "progress_record_book_fkey" FOREIGN KEY (record_book) REFERENCES students(record_book) ON UPDATE CASCADE ON DELETE CASCADE
Access method: heap


edu=# INSERT INTO students VALUES ( 12347, ' ', 0406, 112233 );
INSERT 0 1
edu=# INSERT INTO students VALUES ( 12348, '  ', 0406, 112233 );
INSERT 0 1

edu=# ALTER TABLE students ADD CHECK ( trim(name) <> '' );
ERROR:  check constraint "students_name_check1" of relation "students" is violated by some row

Удалим эти строки чтобы добавть чек.
edu=# DELETE FROM students WHERE trim(name) = '' 
edu-# ;
DELETE 3
edu=# SELECT * from students;
 record_book | name | doc_ser | doc_num | who_adds_row 
-------------+------+---------+---------+--------------
(0 rows)

edu=# 

edu=# ALTER TABLE students ADD CHECK ( trim(name) <> '' );
ALTER TABLE
edu=# 

edu=# INSERT INTO students VALUES ( 12348, '  ', 0406, 112233 );
ERROR:  new row for relation "students" violates check constraint "students_name_check1"
DETAIL:  Failing row contains (12348,   , 406, 112233, postgres).
edu=# 

Теперь добавить не можем! Ура!

17) Представления могут быть, условно говоря, вертикальными и горизонтальными. При создании вертикального представления в список его столбцов включается лишь часть столбцов базовой таблицы (таблиц). Например:
CREATE VIEW airports_names AS
SELECT airport_code, airport_name, city FROM airports;
SELECT * FROM airports_names;
В горизонтальное представление включаются не все строки базовой таблицы (таблиц), а производится их отбор с помощью фраз WHERE или HAVING.
Например:
CREATE VIEW siberian_airports AS
SELECT * FROM airports
WHERE city = 'Новосибирск' OR city = 'Кемерово';
SELECT * FROM siberian_airports;
Конечно, вполне возможен и смешанный вариант, когда ограничивается как список столбцов, так и множество строк при создании представления.
Подумайте, какие представления было бы целесообразно создать для нашей базы данных «Авиаперевозки». Необходимо учесть наличие различных групп пользователей, например: пилоты, диспетчеры, пассажиры, кассиры.
Создайте представления и проверьте их в работе.

Решение:

Вертикальный вид - выбор стобцов:
demo=# CREATE VIEW airports_names AS
SELECT airport_code, airport_name, city FROM airports;
SELECT * FROM airports_names;
CREATE VIEW
 airport_code |     airport_name     |           city           
--------------+----------------------+--------------------------
 YKS          | Якутск               | Якутск
 MJZ          | Мирный               | Мирный
 KHV          | Хабаровск-Новый      | Хабаровск
 PKC          | Елизово              | Петропавловск-Камчатский
 UUS          | Хомутово             | Южно-Сахалинск
 VVO          | Владивосток          | Владивосток
 LED          | Пулково              | Санкт-Петербург
 KGD          | Храброво             | Калининград
 KEJ          | Кемерово             | Кемерово

Горизонтальный вид:
demo=# CREATE VIEW siberian_airports AS
SELECT * FROM airports
WHERE city = 'Новосибирск' OR city = 'Кемерово';
SELECT * FROM siberian_airports;
CREATE VIEW
 airport_code | airport_name |    city     |             coordinates              |     timezone      
--------------+--------------+-------------+--------------------------------------+-------------------
 KEJ          | Кемерово     | Кемерово    | (86.1072006225586,55.27009963989258) | Asia/Novokuznetsk
 OVB          | Толмачёво    | Новосибирск | (82.650703430176,55.012599945068)    | Asia/Novosibirsk
(2 rows)

demo=# 



